generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("APP_DB_URL")
}

model User {
    id        Int               @id @default(autoincrement())
    username  String            @unique
    name      String
    email     String            @unique
    password  String
    role      Role              @default(CUSTOMER)
    devices   SensoriceDevice[]
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
}

enum Role {
    CUSTOMER
    ADMIN
}

model SensoriceDevice {
    id                  Int                  @id @default(autoincrement())
    machineId           String               @unique // Unique ID for the device
    location            String
    createdAt           DateTime             @default(now()) // Device registration timestamp
    updatedAt           DateTime             @updatedAt // Last update timestamp
    readings            SensorReading[] // Relationship to sensor readings
    SensoriceIrrigation SensoriceIrrigation?
    User                User?                @relation(fields: [userId], references: [id])
    userId              Int?
}

model SensorReading {
    id        Int        @id @default(autoincrement())
    machineId String // Foreign key to SensoriceDevice
    timestamp DateTime   @default(now()) // Timestamp for the reading
    type      SensorType // Enum: Type of sensor reading (e.g., hum, temp)
    value     String // Sensor reading value
    createdAt DateTime   @default(now()) // When the reading was added

    device SensoriceDevice @relation(fields: [machineId], references: [machineId], onDelete: Cascade)

    @@index([machineId]) // Add an index for faster lookups
}

enum SensorType {
    HUMIDITY
    TEMPERATURE
    LIGHT_LEVEL
    SOIL_MOISTURE
    MOTION
    VALVE_STATUS
}

model SensoriceIrrigation {
    id        Int      @id @default(autoincrement())
    machineId String   @unique // Unique ID for the device
    timestamp DateTime @default(now()) // Timestamp for the irrigation
    pumpState Boolean // Pump state (on/off)
    createdAt DateTime @default(now()) // When the irrigation was added

    device SensoriceDevice @relation(fields: [machineId], references: [machineId])
}

model Notification {
    id        Int      @id @default(autoincrement())
    status    String
    action    String
    timestamp DateTime @default(now())
}
